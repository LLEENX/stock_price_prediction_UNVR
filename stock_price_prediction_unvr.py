# -*- coding: utf-8 -*-
"""stock_price_prediction_UNVR.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_edMe7rbY2b2ng5aLN1D8gzWQmE6_WoB

# **📈 Prediksi Harga Saham PT Unilever Indonesia (UNVR) Menggunakan LSTM**

Proyek ini merupakan bagian dari submission kelas Machine Learning di Dicoding. Tujuan utama dari proyek ini adalah membangun model prediktif yang dapat meramalkan harga saham PT Unilever Indonesia Tbk (kode saham: UNVR.JK) berdasarkan data historis.

Model yang digunakan adalah Long Short-Term Memory (LSTM), salah satu arsitektur jaringan saraf yang sangat efektif untuk data runtun waktu (time series).

Dataset diambil dari Yahoo Finance menggunakan library `yfinance`, dan mencakup data harga harian dari tahun 2010 hingga Juni 2025, dengan jumlah data lebih dari 500 baris (minimal sesuai syarat).

## **📦 Import Library yang Diperlukan**

Pada bagian ini, saya mengimpor seluruh pustaka Python yang akan digunakan selama proyek ini berlangsung:

- `pandas`: untuk memuat dan memanipulasi data tabular.
- `numpy`: untuk operasi numerik, terutama pada array dan matriks.
- `matplotlib.pyplot`: untuk visualisasi grafik harga saham.
- `MinMaxScaler`: untuk melakukan normalisasi data sebelum masuk ke model LSTM.
- `Sequential`, `LSTM`, `Dense`: komponen dari Keras (TensorFlow) untuk membangun dan melatih model LSTM.
- `mean_squared_error`, `mean_absolute_error`: metrik evaluasi model prediksi regresi.
- `yfinance`: untuk mengunduh data saham langsung dari Yahoo Finance.
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_squared_error, mean_absolute_error
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense
import yfinance as yf

"""# **Data Preparation**

## **📥 Mengunduh Dataset Saham UNVR**

Dataset diambil langsung dari Yahoo Finance menggunakan library `yfinance`. Data yang diambil adalah harga saham harian PT Unilever Indonesia (UNVR.JK) sejak 1 Januari 2010 hingga 24 Juni 2025.

Hal ini untuk memastikan bahwa jumlah sampel data mencukupi (lebih dari 500 baris), sesuai dengan kriteria submission.

Kolom yang tersedia dalam data:
- **Open**: Harga saat pembukaan pasar
- **High**: Harga tertinggi dalam satu hari
- **Low**: Harga terendah
- **Close**: Harga saat penutupan pasar
- **Adj Close**: Harga yang sudah disesuaikan dengan pembagian dividen atau stock split
- **Volume**: Jumlah saham yang diperdagangkan pada hari tersebut
"""

# Unduh data saham dari Yahoo Finance
data = yf.download('UNVR.JK', start='2010-01-01', end='2025-06-24')

# Tampilkan 5 baris pertama
data.head()

"""## **📊 Visualisasi Tren Harga Saham UNVR**

Untuk memahami pergerakan harga saham secara umum, dilakukan visualisasi data harga penutupan dari waktu ke waktu. Hal ini penting untuk mengetahui pola naik turun harga serta potensi musiman atau tren jangka panjang.

"""

plt.figure(figsize=(12,6))
plt.plot(data['Close'], label='Harga Penutupan (Close)', color='blue')
plt.title('Tren Harga Penutupan Saham UNVR')
plt.xlabel('Tanggal')
plt.ylabel('Harga (IDR)')
plt.grid(True)
plt.legend()
plt.show()

"""## **🎯 Seleksi Kolom Target (Close)**

Karena tujuan dari proyek ini adalah memprediksi harga penutupan saham, maka kolom yang digunakan sebagai input utama hanyalah kolom `Close`. Kolom lain seperti Open, High, Low dan Volume tidak digunakan dalam model ini.

"""

close_prices = data[['Close']]
close_prices.head()

"""# **Preprocessing**

## **🧹 Normalisasi Data**

Sebelum data dimasukkan ke dalam model LSTM, dilakukan proses normalisasi menggunakan `MinMaxScaler` agar semua nilai berada dalam rentang 0 hingga 1. Ini penting agar model neural network bisa belajar secara optimal, karena perbedaan skala data dapat memengaruhi proses pembelajaran.
"""

scaler = MinMaxScaler()
scaled_data = scaler.fit_transform(close_prices)

# Kembalikan ke bentuk DataFrame untuk kemudahan pengolahan selanjutnya
scaled_data = pd.DataFrame(scaled_data, columns=['Close'], index=close_prices.index)
scaled_data.head()

"""## **📈 Transformasi ke Format Time Series untuk LSTM**

Model LSTM memerlukan data dalam bentuk 3 dimensi: `(samples, timesteps, features)`. Oleh karena itu, digunakan pendekatan sliding window.

Di sini digunakan:
- `n_past = 60` → model melihat 60 hari terakhir untuk memprediksi hari ke-61

"""

X, y = [], []
n_past = 60

for i in range(n_past, len(scaled_data)):
    X.append(scaled_data.iloc[i - n_past:i].values)
    y.append(scaled_data.iloc[i].values)

X, y = np.array(X), np.array(y)

"""# C**reate Model 🧠**

### 🛠️ Membuat dan Melatih Model LSTM

Saya menggunakan model `Sequential` dengan dua lapisan LSTM berurutan. Lapisan pertama memiliki 64 unit dan lapisan kedua 32 unit, diakhiri dengan lapisan Dense berisi satu neuron karena kita memprediksi satu nilai.
"""

model = Sequential()
model.add(LSTM(64, return_sequences=True, input_shape=(X.shape[1], 1)))
model.add(LSTM(32))
model.add(Dense(1))
model.compile(optimizer='adam', loss='mean_squared_error')
model.fit(X, y, epochs=20, batch_size=32)

"""# **Prediction 🔮**

### 🧾 Prediksi Harga 10 Hari ke Depan

Setelah model LSTM berhasil dilatih, saya melakukan prediksi harga saham untuk 10 hari ke depan. Proses ini tidak hanya memprediksi satu langkah ke depan, tetapi menggunakan pendekatan *recursive forecasting*, yaitu memprediksi hari pertama, lalu menggunakan prediksi tersebut sebagai input untuk memprediksi hari kedua, dan seterusnya hingga hari ke-10.

Langkah-langkahnya sebagai berikut:

1. **Ambil 60 Hari Terakhir sebagai Input Awal**  
   Saya ambil 60 data terakhir dari dataset `scaled_data`, karena model dilatih dengan menggunakan 60 langkah ke belakang (sliding window). Data ini direstrukturisasi ke bentuk `(1, 60, 1)` karena LSTM membutuhkan input 3 dimensi: `(samples, timesteps, features)`.

2. **Lakukan Prediksi Bertahap Selama 10 Hari (Iteratif)**  
   - Pada setiap iterasi, saya memprediksi satu nilai (`pred`) berdasarkan input 60 data sebelumnya.
   - Nilai prediksi ini ditambahkan ke `future_predictions`.
   - Lalu, `future_input` diperbarui dengan menggeser window ke depan: menghapus data paling awal dan menambahkan prediksi baru di akhir.
   - Ini dilakukan terus hingga mendapatkan 10 prediksi berturut-turut.

3. **Transformasi Kembali ke Skala Asli (Inverse Transform)**  
   Nilai prediksi yang dihasilkan masih dalam skala normalisasi (0–1), sehingga perlu dikembalikan ke skala harga sebenarnya menggunakan `scaler.inverse_transform()` agar interpretasi hasil lebih mudah dan bisa dibandingkan langsung dengan harga historis.

Dengan pendekatan ini, saya bisa mendapatkan estimasi harga saham UNVR untuk 10 hari mendatang dengan mempertahankan konteks historis 60 hari sebelumnya.
"""

last_60_days = scaled_data[-60:]
future_input = last_60_days.values.reshape(1, 60, 1)

future_predictions = []
for _ in range(10):
    pred = model.predict(future_input)[0]
    future_predictions.append(pred)
    future_input = np.append(future_input[:, 1:, :], [[pred]], axis=1)

future_predictions = scaler.inverse_transform(future_predictions)

"""### **📉 Visualisasi Hasil Prediksi**

Selanjutnya adalah memvisualisasikan harga historis 100 hari terakhir bersamaan dengan hasil prediksi 10 hari ke depan. Garis putus-putus berwarna oranye menunjukkan tren hasil prediksi dari model LSTM.
"""

# Buat range tanggal untuk 10 hari ke depan
future_dates = pd.date_range(start=close_prices.index[-1] + pd.Timedelta(days=1), periods=10)

# Gabungkan harga terakhir + hasil prediksi
combined_prices = [close_prices.iloc[-1]['Close']] + future_predictions.flatten().tolist()
combined_dates = [close_prices.index[-1]] + list(future_dates)

# Buat DataFrame hasil prediksi
combined_df = pd.DataFrame({'Price': combined_prices}, index=combined_dates)

# Visualisasikan
plt.figure(figsize=(12,6))
plt.plot(close_prices[-100:], label='Historis', color='blue')
plt.plot(combined_df, label='Prediksi 10 Hari', color='orange', linestyle='--')
plt.title('Prediksi Harga Saham UNVR 10 Hari ke Depan')
plt.xlabel('Tanggal')
plt.ylabel('Harga (IDR)')
plt.legend()
plt.grid(True)
plt.show()

"""## **Analysis / Evaluation 📊**

### **🧪 Evaluasi Model**

Untuk menilai akurasi model, dataset dibagi menjadi 80% data latih dan 20% data uji. Setelah itu, saya prediksi nilai dari data uji dan bandingkan dengan nilai aktual. Beberapa metrik evaluasi yang dihitung, yaitu:
- Mean Squared Error (MSE)
- Root Mean Squared Error (RMSE)
- Mean Absolute Error (MAE)
- Mean Absolute Percentage Error (MAPE)
"""

train_size = int(len(scaled_data) * 0.8)
test_data = scaled_data[train_size - n_past:]
X_test, y_test = [], []

for i in range(n_past, len(test_data)):
    X_test.append(test_data.iloc[i - n_past:i].values)
    y_test.append(test_data.iloc[i].values)

X_test, y_test = np.array(X_test), np.array(y_test)
predicted_test = model.predict(X_test)

predicted_prices = scaler.inverse_transform(predicted_test)
actual_prices = scaler.inverse_transform(y_test)

mse = mean_squared_error(actual_prices, predicted_prices)
rmse = np.sqrt(mse)
mae = mean_absolute_error(actual_prices, predicted_prices)
mape = np.mean(np.abs((actual_prices - predicted_prices) / actual_prices)) * 100

print(f"\nHasil Evaluasi Model:")
print(f"MSE  : {mse:.2f}")
print(f"RMSE : {rmse:.2f}")
print(f"MAE  : {mae:.2f}")
print(f"MAPE : {mape:.2f}%")

"""Setelah model LSTM saya latih dan diuji menggunakan 20% data terakhir, berikut adalah hasil evaluasi model berdasarkan beberapa metrik umum dalam regresi:

- **Mean Squared Error (MSE): 15.450,06**
<br>Nilai MSE mengukur rata-rata dari kuadrat selisih antara harga aktual dan harga prediksi. Semakin kecil nilai MSE, semakin baik model dalam memprediksi. Dalam kasus ini, nilai 15 ribuan masih dalam batas wajar untuk data harga saham yang bervariasi.

- **Root Mean Squared Error (RMSE): 124,30**
<br>RMSE merupakan akar kuadrat dari MSE dan berada pada skala yang sama dengan harga saham (dalam satuan rupiah). Nilai ini menunjukkan bahwa rata-rata kesalahan prediksi model saya sekitar Rp124,30 dari nilai aktual. Ini cukup kecil dibandingkan harga saham UNVR yang biasanya berada di kisaran ribuan rupiah.

- **Mean Absolute Error (MAE): 88,44**
<br>MAE mengukur rata-rata dari selisih absolut (tanpa tanda) antara prediksi dan nilai aktual. Nilai ini menunjukkan rata-rata deviasi model dari harga sebenarnya adalah sekitar Rp88,44, yang cukup baik dalam konteks prediksi saham harian.

- **Mean Absolute Percentage Error (MAPE): 3,37%**
<br>MAPE menunjukkan rata-rata kesalahan prediksi dalam bentuk persentase terhadap nilai aktual. Nilai 3,37% mengindikasikan bahwa model saya hanya menyimpang sebesar ±3,37% dari harga sebenarnya. Untuk model time series saham, ini tergolong cukup akurat, terutama untuk data harian yang cenderung fluktuatif.

**Kesimpulan:**
<br>Dengan nilai MAPE di bawah 5%, model LSTM yang saya bangun dapat dikatakan efektif dalam memprediksi harga penutupan saham UNVR. Meskipun tidak sempurna, model ini menunjukkan tren yang cukup mendekati harga aktual.

### **📊 Visualisasi Evaluasi**

Hasil prediksi selanjutnya dibandingkan dengan data aktul dengan di visualkan ke dalam grafik
"""

plt.figure(figsize=(12,6))
plt.plot(test_data.index[n_past:], actual_prices, label='Aktual', color='blue')
plt.plot(test_data.index[n_past:], predicted_prices, label='Prediksi', color='orange', linestyle='--')
plt.title('Perbandingan Harga Aktual vs Prediksi pada Data Uji')
plt.xlabel('Tanggal')
plt.ylabel('Harga (IDR)')
plt.legend()
plt.grid(True)
plt.show()

"""Grafik ini memberikan gambaran jelas tentang seberapa baik model dalam memprediksi harga saham dibandingkan dengan harga yang sebenarnya."""

